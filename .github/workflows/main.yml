on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: AWS WORKFLOW

jobs:
  create_cluster:
    uses: vaibhavrathod-1/Terraform/.github/workflows/manual.yml@main  
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
  Build_and_Push_Image_to_ECR:
    name: build and push
    needs: create_cluster
    runs-on: ubuntu-latest

    steps:    
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: "latest"

      run: |
        # Build a docker container and push it to ECR 
        echo "ECR Login"
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/z2g8g3c5
        docker build -t public.ecr.aws/z2g8g3c5/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push public.ecr.aws/z2g8g3c5/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
  Deployment_In_Dev_Environment:
    name: Deploying in Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: Build_and_Push_Image_to_ECR
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Login For EKS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
        aws-region: us-east-2
    
    - name: Deploy into EKS  
      id: deploy-image
      run: |
        aws eks --region us-east-2 update-kubeconfig --name vaibhav
        helm upgrade --recreate-pods -i octo-app octo-app
       
  Deployment_In_Prod_Evironment:
    name: Deployment in prod
    runs-on: ubuntu-latest
    environment: prod
    needs: Deployment_In_Dev_Environment
    steps:
    - name: Login For EKS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
        aws-region: us-east-2
    
    - name: Deploy into EKS  
      id: deploy-image
      run: |
        aws eks --region us-east-2 update-kubeconfig --name prod-vaibhav
        helm upgrade --recreate-pods -i octo-app octo-app
       
  # sonarqube:
  #   name: sonarqube
  #   needs: deployment
  #   uses: vaibhavrathod-1/sonarqube-scan/.github/workflows/build.yml@main
  #   secrets:
  #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
